(defpoll hour :interval "1s" "date '+%I'")
(defpoll minute :interval "1s" "date '+%M'")
(defpoll ampm :interval "1s" "date '+%p'")
(defvar date "TODO: update this")
(defvar date_reveal false)

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll volume :interval "1s"
  "[ $(pamixer --get-mute) = true ] && echo 0 || pamixer --get-volume")

(defwindow bar
  :monitor 0 :exclusive true
  :geometry (geometry :x "0%" :y "0%" :width "100%" :height "15px" :anchor "top center")
  :reserve (struts :side "top" :distance "4%") (bar))

(defwindow calendar
  :geometry (geometry :anchor "top right" :y "20px" :width "10%")
  :stacking "fg" :windowtype "dialog" :wm-ignore "false"
  (box :class "cal" :orientation "h" :valign "fill" :halign "fill"
    (calendar
      :day `date "+%d"` :month `date "+%m" - 1` :year `date "+%y"`
      :show-details "true" :show-heading "true" :show-day-names "true"
      :onclick "notify-send {0} {1} {2}")))

(defwidget bar [] (centerbox :orientation "h" (workspaces) (music) (sidestuff)))

(defwidget time []
  (eventbox
    :tooltip "Current time" :cursor "pointer"
    :onhover "eww update date_reveal=true" :onhoverlost "eww update date_reveal=false"
    (button :onclick "eww open calendar"
      (box :class "time_box"
        :space-evenly "false" :orientation "h" :valign "center" :halign "fill"
        (label
          :class "time" :valign "center"
          :markup "<span font-weight=\"heavy\">${hour}</span><span font-weight=\"heavy\">:${minute}</span><span font-size=\"xx-small\">${ampm}</span>" )
        (revealer
          :reveal date_reveal :transition "slideright" :duration "350ms" :valign "fill"
          (label
            :valign "fill" :class "date"
            :markup "<span font-size=\"xx-small\">${date}</span>"))))))

(defwidget mem []
    (box :class "mem_module"
        (circular-progress :value { EWW_RAM.used_mem_perc }
            :class "membar" :thickness 4
        (button :class "iconmem" :limit-width 2
            :tooltip "using ${round(EWW_RAM.used_mem_perc, 0)}% ram"
            ;; :onclick TODO: details"
            :show_truncated false :wrap false "ÔÑë"))))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ÔÉ§ " :value {EWW_CPU.avg})
    (mem)
    (metric :label "Óâ¶ " :value {EWW_RAM.used_mem_perc})
    (metric :label "ÔÇ† " :value {100 * (1 - EWW_RAM.free_swap / EWW_RAM.total_swap)})
    (metric :label "Û∞ãä" :value {EWW_DISK["/"].used_perc})
    (metric :label "Û∞Åπ" :value {EWW_BATTERY["BAT1"].capacity})
    (metric :label "ÔÄ® " :value volume)
    (time)))

(defwidget workspaces []
  (box :class "workspaces" :orientation "h" :space-evenly true :halign "start" :spacing 10
    ; TODO: dedup/add symbols
    ; TODO: watch for changes
    (button :onclick "hyprctl dispatch workspace 1" 1)
    (button :onclick "hyprctl dispatch workspace 2" 2)
    (button :onclick "hyprctl dispatch workspace 3" 3)
    (button :onclick "hyprctl dispatch workspace 4" 4)
    (button :onclick "hyprctl dispatch workspace 5" 5)
    (button :onclick "hyprctl dispatch workspace 6" 6)
    (button :onclick "hyprctl dispatch workspace 7" 7)
    (button :onclick "hyprctl dispatch workspace 8" 8)
    (button :onclick "hyprctl dispatch workspace 9" 9)
    (button :onclick "hyprctl dispatch workspace 10" 10)
    (button :onclick "hyprctl dispatch workspace 11" 11)))

(defwidget music []
  (box :class "music" :orientation "h" :space-evenly false :halign "center"
    {music != "" ? "üéµ ${music}" : ""}))

(defwidget metric [label value]
  (box :orientation "h" :class "metric" :space-evenly false
    (box :class "label" label)
    (scale :min 0 :max 101 :active false :value value)))
